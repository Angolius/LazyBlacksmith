{
  "name": "Lazyblacksmith",
  "tagline": "EVE Online Industry app written in python (flask) for backend, html / css / js for frontend",
  "body": "# LazyBlacksmith\r\nAn EVE Online Industry application for lazy people.\r\n\r\n\r\n## About\r\nLazyBlacksmith is a flask application allowing people to get informations about industry in eveonline.\r\n\r\n#### Features\r\n* Blueprints\r\n * Manufacturing informations including components required and installation costs\r\n * Research data for material and time efficiency (time, cost)\r\n * Invention informations for components and costs.\r\n* Get and compare item price over all regions\r\n\r\n#### CREST (as batch or through celery)\r\n* Use CREST market price / adjusted price for costs\r\n* Use CREST industry index for installation fee\r\n\r\n#### TODO\r\n* Ore refining and compression (see branch ore_refining_compression)\r\n * View refining table\r\n * Calculate compression from user needs (in materials) and using defaults ore\r\n  * Also allow to manually select what ore we want to use to compress\r\n* Permalinks in manufacturing / research / production\r\n* Link API key to user account (CREST Login) to get, save and configure existing blueprints, with their ME/TE for direct use in manufacturing / invention\r\n\r\n\r\n\r\n## Requirements\r\n* Python 2.7\r\n* Virtualenv (recommended)\r\n* [NodeJS](http://nodejs.org/) + [Grunt-CLI](http://gruntjs.com/getting-started)\r\n* Database connectors depending on the one you use (MySQL 5.6+,...)\r\n* See [requirements.txt](requirements/) for other requirements\r\n* (Optional/Recommended) Cache system (eg. python-memcached or redis-cache)\r\n* (Optional) [Redis](http://redis.io/) for async tasks and queues (and cache)!\r\n* Eve Online Icons (see CCP Icons part)\r\n\r\n\r\n\r\n## Installation\r\n\r\n#### Environnement\r\nCreate your virtualenv and get LazyBlacksmith.\r\n```shell\r\ngit clone https://github.com/Kyria/LazyBlacksmith.git\r\ncd LazyBlacksmith\r\nvirtualenv env\r\n```\r\n\r\nOnce your virtualenv is created, load it and install requirements\r\n```\r\n# in windows, type env/Script/activate\r\nsource env/bin/activate\r\npip install -r requirements/requirements.txt\r\n\r\n# if you are using celery with redis\r\npip install -r requirements/requirements-celery-redis.txt\r\n```\r\n\r\n#### Configs\r\nYou now need to create an application on [EVE Online Developpers](https://developers.eveonline.com/applications) to get CREST informations (secret key, client ID)\r\n\r\nOnce this is done, copy config.dist into config.py and edit the file.\r\nSome mandatory informations :\r\n```\r\nDEBUG : True for dev, False for prod (require static compilation, see below)\r\nSQLALCHEMY_DATABASE_URI : the database informations\r\nUSE_CCP_ICONS : True/False to display icons (read the CCP Icons chapter below)\r\nCACHE_TYPE : leave 'null' if no cache, or set it your needs\r\n\r\nCelery configs, if you don't use it, leave them like that\r\n\r\nCREST API informations : set it with what you got/set before in CCP Developpers Application\r\n```\r\n\r\n#### Init data\r\nNow you set everything, it's time to \"install\" the database. This should create all the table in your database (if you get any errors, check you sqlalchemy informations)\r\n```\r\npython manage.py db upgrade\r\n```\r\n\r\nDownload the latest SDE conversion from fuzzwork in sqlite [here](https://www.fuzzwork.co.uk/dump/sqlite-latest.sqlite.bz2) unzip it then load it with :\r\n```\r\npython manage.py sde_import -d path/to/sqlite-latest.sqlite\r\n```\r\n\r\nIf you also want to have some CREST data right now, you can run the following commands :\r\n```\r\npython manage.py celery_task -a update_adjusted_price\r\npython manage.py celery_task -a update_industry_index\r\npython manage.py celery_task -a update_market_price\r\n```\r\n\r\n#### Static file compilation\r\nIf you are using it in production environnement, or upgrading your installation, you need to remake all static files (css/js). For this, first do ```npm install``` to install all the nodejs required package, then type ```grunt``` to compile the static files.\r\n\r\n#### CREST / API\r\nTo update the CREST data, you have 2 solutions :\r\n* run them directly, as you did in the \"init data\" part\r\n* use celery\r\n\r\n##### Celery + Celery Beat (Scheduler)\r\nThere are multiple solution to run celery with celery beat. The example below are the minimal configurations.\r\n\r\nYou can celery with the -B option, to run beat and worker in the same time :\r\n```\r\nPATH/TO/LazyBlacksmith/env/bin/celery worker -A celery_app:celery_app -B -c5\r\n```\r\n\r\nOr you can run two daemons, one for celery beat, the other for the workers :\r\n```\r\n# celery beat\r\nPATH/TO/LazyBlacksmith/env/bin/celery beat -A celery_app:celery_app\r\n\r\n# celery workers\r\nPATH/TO/LazyBlacksmith/env/bin/celery multi start worker -A celery_app:celery_app -c5\r\n```\r\n\r\n\r\n\r\n## CCP Icons\r\n\r\nIf you set ```USE_CCP_ICONS = True``` you need to download the files \"EVE_VERSION_Types.zip\" from CCP Toolkit ; https://developers.eveonline.com/resource/resources and then\r\nmove the files into ```lazyblacksmith/static/ccp/``` (as a result, you should have ```lazyblacksmith/static/ccp/Types/files.png```)\r\n\r\n\r\n\r\n## Contact\r\nGuillaume B.\r\n* Github: @Kyria\r\n* [TweetFleet Slack](https://www.fuzzwork.co.uk/tweetfleet-slack-invites/): @althalus\r\n* Eveonline: Althalus Stenory\r\n\r\n\r\n\r\n## LazyBlacksmith License\r\nCopyright (c) 2015, Guillaume\r\nAll rights reserved.\r\n\r\nRedistribution and use in source and binary forms, with or without\r\nmodification, are permitted provided that the following conditions are met:\r\n\r\n* Redistributions of source code must retain the above copyright notice, this\r\n  list of conditions and the following disclaimer.\r\n\r\n* Redistributions in binary form must reproduce the above copyright notice,\r\n  this list of conditions and the following disclaimer in the documentation\r\n  and/or other materials provided with the distribution.\r\n\r\n* Neither the name of LazyBlacksmith nor the names of its\r\n  contributors may be used to endorse or promote products derived from\r\n  this software without specific prior written permission.\r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\r\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\r\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n\r\n\r\n\r\n## EVE Online / CCP License\r\nEVE Online and the EVE logo are the registered trademarks of CCP hf. All rights are reserved worldwide. All other trademarks are the property of their respective owners. EVE Online, the EVE logo, EVE and all associated logos and designs are the intellectual property of CCP hf. All artwork, screenshots, characters, vehicles, storylines, world facts or other recognizable features of the intellectual property relating to these trademarks are likewise the intellectual property of CCP hf. CCP hf. has granted permission to LazyBlacksmith to use EVE Online and all associated logos and designs for promotional and information purposes on its website but does not endorse, and is not in any way affiliated with, LazyBlacksmith. CCP is in no way responsible for the content on or functioning of this website, nor can it be liable for any damage arising from the use of this website.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}